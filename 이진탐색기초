from bisect import bisect_left, bisect_right

a=[1,2,4,4,8]
x = 4

print(bisect_left(a,x)) #정렬된 순서를 유지하면서 배열 a에 x를 삽입할 가장 왼쪽 인덱스를 반환 => 2
print(bisect_right(a,x)) #정렬된 순서를 유지하면서 배열 a에 x를 삽입할 가장 오른쪽 인덱스를 반환 => 4


#이진 탐색 소스코드구현(반복문)
def binary_search_for(array, target, start, end):
    while start <= end:
        mid = (start + end) // 2

        if array[mid] == target:
            return mid
        
        elif array[mid] > target:
            end = mid - 1
        else:
            start = mid + 1

    return None



#이진 탐색 소스코드구현(재귀)
def binary_search_dfs(array, target, start, end):
    if start > end:
        return None
    
    mid = (start + end) // 2

    #찾은 경우
    if array[mid] == target:
        return mid
    
    #중간점의 값 보다 찾고자 한는 값이 작은 경우 
    elif array[mid] > target:
        return binary_search_dfs(array, target, start, mid-1)
    else:
        return binary_search_dfs(array,target, mid+1,end)

# n개의 원소와 target을 입력 받기
n, target = list(map(int, input().split()))
# 원소 입력 받기
array = list(map(int,input().split()))
# 이진 탐색 수행 결과 출력
result = binary_search_dfs(array, target, 0, n-1)

if result == None:
    print("원소가 존재하지 않습니다")
else:
    print(result + 1)